import json
import subprocess
import os
import tempfile

output_path = os.path.join(tempfile.gettempdir(), "nmap_scan_report.json")

def load_vulnerability_report(report_file="nmap_scan_report.json"):
    """Loads the JSON vulnerability report generated by the Nmap scan."""
    try:
        with open(output_path, "r", encoding="utf-8") as f:
            return json.load(f)  # return the parsed report
    except FileNotFoundError:
        print("Error: Vulnerability report not found. Run the scan first.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Invalid JSON format in the report.")
        exit(1)

def generate_firewall_rules(report):
    """Generates macOS PF firewall rules based on detected vulnerabilities."""
    firewall_rules = []
    high_risk_ports = []
    medium_risk_ports = []

    for finding in report.get("findings", []):
        port = finding.get("Port Number")
        risk_level = finding.get("Risk Assessment", "Unknown")

        if "üî¥ High" in risk_level:
            print(f"[!] High-risk detected on port {port}, blocking it.")
            firewall_rules.append(f"block drop in proto tcp from any to any port {port}")
            high_risk_ports.append(port)

        elif "üü° Medium" in risk_level:
            print(f"[-] Medium-risk detected on port {port}, adding return block.")
            firewall_rules.append(f"block return in proto tcp from any to any port {port}")
            medium_risk_ports.append(port)

    return firewall_rules, high_risk_ports + medium_risk_ports

def apply_firewall_rules(firewall_rules, pf_rules_file=None):
    if pf_rules_file is None:
        pf_rules_file = os.path.expanduser("~/Documents/block_ports.conf")
    
    try:
        with open(pf_rules_file, "w", encoding="utf-8") as pf_conf:
            pf_conf.write("# Auto-generated firewall rules\n")
            for rule in firewall_rules:
                pf_conf.write(rule + "\n")

        print(f"[‚úî] Firewall rules saved to: {pf_rules_file}")
        print(f"[‚ö†] To activate, run in terminal:\n  sudo pfctl -f {pf_rules_file}")

    except Exception as e:
        print(f"Error applying firewall rules: {e}")


def main():
    print("[+] Loading vulnerability report...")
    report = load_vulnerability_report()
    
    print("[+] Generating firewall rules...")
    firewall_rules, high_risk_ports = generate_firewall_rules(report)
    
    if not firewall_rules:
        print("[+] No high-risk vulnerabilities found. No firewall rules needed.")
        return
    
    print("[+] Applying firewall rules...")
    apply_firewall_rules(firewall_rules)
    
    print("üîç High/medium-risk ports to block:", high_risk_ports)

if __name__ == "__main__":
    main()
