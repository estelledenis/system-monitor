import nmap
import json
import datetime
import sys
import tempfile
import os
import platform
import shutil

def check_nmap_installed():
    if not shutil.which("nmap"):
        raise EnvironmentError("Nmap is not installed or not in PATH. Please install Nmap.")

def classify_risk(port_data):
    service = port_data.get("name", "")
    product = port_data.get("product", "")
    scripts = port_data.get("script", {})

    if any("vuln" in k and "false" not in v.lower() for k, v in scripts.items()):
        return "[HIGH]"
    if "http" in service or "ssl" in service:
        return "[MEDIUM]"
    return "[LOW]"

def scan_localhost():
    check_nmap_installed()
    nm = nmap.PortScanner()
    print("Scanning 127.0.0.1 for vulnerabilities...", flush=True)
    nm.scan('127.0.0.1', arguments='-sV --script vuln')

    host_data = nm["127.0.0.1"]
    report = {
        "scan_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "host": "Your Computer (127.0.0.1)",
        "scan": host_data
    }

    # Save JSON file
    output_path = os.path.join(tempfile.gettempdir(), "nmap_scan_report.json")
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2)

    print("=== Security Scan Report ===")
    print(f"Scan Time: {report['scan_time']}")
    print(f"Scanned Host: {report['host']}")
    print("Findings:")
    print("-" * 40)

    for port, port_data in host_data.get("tcp", {}).items():
        risk = classify_risk(port_data)
        print(f"Port: {port}")
        print(f"Protocol: TCP")
        print(f"Service: {port_data.get('name', 'Unknown')}")
        print(f"Version: {port_data.get('version', 'Unknown')}")
        print(f"Risk Level: {risk}")
        print("-" * 40)

    print(f"Scan complete. Report saved to {output_path}")
    return output_path

if __name__ == '__main__':
    if platform.system() not in ["Windows", "Darwin"]:
        raise EnvironmentError("Unsupported OS for this tool.")
    scan_localhost()
