import os
import json
from unittest.mock import patch, MagicMock

@patch('vulnerability_scan.nmap_scan.nmap.PortScanner')
def test_scan_localhost_creates_json(mock_portscanner_class):
    mock_scanner = MagicMock()
    mock_host = MagicMock()
    mock_host.all_protocols.return_value = ['tcp']
    mock_host.has_tcp.return_value = True
    mock_host.__getitem__.return_value = {
        22: {"state": "open"}
    }

    mock_scanner.__getitem__.return_value = mock_host
    mock_portscanner_class.return_value = mock_scanner

    from vulnerability_scan import nmap_scan

    # âš¡ Manually set expected output path
    output_path = os.path.join(
        os.environ.get("TEMP", "/tmp"), "nmap_scan_report.json"
    )

    # ðŸ“„ Run the real function
    returned_path = nmap_scan.scan_localhost()

    # Now returned_path must not be None
    assert returned_path is not None
    assert os.path.exists(returned_path)

    # âœ… Confirm file contents look right
    with open(returned_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    assert "scan_time" in data
    assert "host" in data
    assert "scan" in data

    # ðŸ§¹ Clean up
    os.remove(returned_path)
